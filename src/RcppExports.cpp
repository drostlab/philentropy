// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/philentropy.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Ecpp
double Ecpp(const Rcpp::NumericVector& P, Rcpp::String unit);
RcppExport SEXP _philentropy_Ecpp(SEXP PSEXP, SEXP unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type unit(unitSEXP);
    rcpp_result_gen = Rcpp::wrap(Ecpp(P, unit));
    return rcpp_result_gen;
END_RCPP
}
// JEcpp
double JEcpp(const Rcpp::NumericVector& JointProbabilities, Rcpp::String unit);
RcppExport SEXP _philentropy_JEcpp(SEXP JointProbabilitiesSEXP, SEXP unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type JointProbabilities(JointProbabilitiesSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type unit(unitSEXP);
    rcpp_result_gen = Rcpp::wrap(JEcpp(JointProbabilities, unit));
    return rcpp_result_gen;
END_RCPP
}
// CEcpp
double CEcpp(Rcpp::NumericVector JointProbabilities, Rcpp::NumericVector Probabilities, Rcpp::String unit);
RcppExport SEXP _philentropy_CEcpp(SEXP JointProbabilitiesSEXP, SEXP ProbabilitiesSEXP, SEXP unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type JointProbabilities(JointProbabilitiesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Probabilities(ProbabilitiesSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type unit(unitSEXP);
    rcpp_result_gen = Rcpp::wrap(CEcpp(JointProbabilities, Probabilities, unit));
    return rcpp_result_gen;
END_RCPP
}
// MIcpp
double MIcpp(Rcpp::NumericVector X, Rcpp::NumericVector Y, Rcpp::NumericVector XY, Rcpp::String unit);
RcppExport SEXP _philentropy_MIcpp(SEXP XSEXP, SEXP YSEXP, SEXP XYSEXP, SEXP unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type XY(XYSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type unit(unitSEXP);
    rcpp_result_gen = Rcpp::wrap(MIcpp(X, Y, XY, unit));
    return rcpp_result_gen;
END_RCPP
}
// pearson_corr_centred
double pearson_corr_centred(const Rcpp::NumericVector& x, const Rcpp::NumericVector& y, bool testNA);
RcppExport SEXP _philentropy_pearson_corr_centred(SEXP xSEXP, SEXP ySEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(pearson_corr_centred(x, y, testNA));
    return rcpp_result_gen;
END_RCPP
}
// pearson_corr_uncentred
double pearson_corr_uncentred(const Rcpp::NumericVector& x, const Rcpp::NumericVector& y, bool testNA);
RcppExport SEXP _philentropy_pearson_corr_uncentred(SEXP xSEXP, SEXP ySEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(pearson_corr_uncentred(x, y, testNA));
    return rcpp_result_gen;
END_RCPP
}
// squared_pearson_corr
double squared_pearson_corr(const Rcpp::NumericVector& x, const Rcpp::NumericVector& y, bool testNA);
RcppExport SEXP _philentropy_squared_pearson_corr(SEXP xSEXP, SEXP ySEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(squared_pearson_corr(x, y, testNA));
    return rcpp_result_gen;
END_RCPP
}
// DistMatrixWithoutUnitDF
Rcpp::NumericMatrix DistMatrixWithoutUnitDF(Rcpp::DataFrame distsDF, Rcpp::Function DistFunc, bool testNA);
RcppExport SEXP _philentropy_DistMatrixWithoutUnitDF(SEXP distsDFSEXP, SEXP DistFuncSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type distsDF(distsDFSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type DistFunc(DistFuncSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(DistMatrixWithoutUnitDF(distsDF, DistFunc, testNA));
    return rcpp_result_gen;
END_RCPP
}
// DistMatrixMinkowskiMAT
Rcpp::NumericMatrix DistMatrixMinkowskiMAT(Rcpp::NumericMatrix dists, double p, bool testNA);
RcppExport SEXP _philentropy_DistMatrixMinkowskiMAT(SEXP distsSEXP, SEXP pSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(DistMatrixMinkowskiMAT(dists, p, testNA));
    return rcpp_result_gen;
END_RCPP
}
// DistMatrixWithoutUnitMAT
Rcpp::NumericMatrix DistMatrixWithoutUnitMAT(Rcpp::NumericMatrix dists, Rcpp::Function DistFunc, bool testNA);
RcppExport SEXP _philentropy_DistMatrixWithoutUnitMAT(SEXP distsSEXP, SEXP DistFuncSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type DistFunc(DistFuncSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(DistMatrixWithoutUnitMAT(dists, DistFunc, testNA));
    return rcpp_result_gen;
END_RCPP
}
// DistMatrixWithUnitDF
Rcpp::NumericMatrix DistMatrixWithUnitDF(Rcpp::DataFrame distsDF, Rcpp::Function DistFunc, bool testNA, Rcpp::String unit);
RcppExport SEXP _philentropy_DistMatrixWithUnitDF(SEXP distsDFSEXP, SEXP DistFuncSEXP, SEXP testNASEXP, SEXP unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type distsDF(distsDFSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type DistFunc(DistFuncSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type unit(unitSEXP);
    rcpp_result_gen = Rcpp::wrap(DistMatrixWithUnitDF(distsDF, DistFunc, testNA, unit));
    return rcpp_result_gen;
END_RCPP
}
// DistMatrixWithUnitMAT
Rcpp::NumericMatrix DistMatrixWithUnitMAT(Rcpp::NumericMatrix dists, Rcpp::Function DistFunc, bool testNA, Rcpp::String unit);
RcppExport SEXP _philentropy_DistMatrixWithUnitMAT(SEXP distsSEXP, SEXP DistFuncSEXP, SEXP testNASEXP, SEXP unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type DistFunc(DistFuncSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type unit(unitSEXP);
    rcpp_result_gen = Rcpp::wrap(DistMatrixWithUnitMAT(dists, DistFunc, testNA, unit));
    return rcpp_result_gen;
END_RCPP
}
// dist_one_one
double dist_one_one(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, const Rcpp::String& method, const double& p, const bool& testNA, const Rcpp::String& unit, const double& epsilon);
RcppExport SEXP _philentropy_dist_one_one(SEXP PSEXP, SEXP QSEXP, SEXP methodSEXP, SEXP pSEXP, SEXP testNASEXP, SEXP unitSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const Rcpp::String& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const double& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const bool& >::type testNA(testNASEXP);
    Rcpp::traits::input_parameter< const Rcpp::String& >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_one_one(P, Q, method, p, testNA, unit, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// dist_one_many
Rcpp::NumericVector dist_one_many(const Rcpp::NumericVector& P, Rcpp::NumericMatrix dists, Rcpp::String method, double p, bool testNA, Rcpp::String unit, double epsilon);
RcppExport SEXP _philentropy_dist_one_many(SEXP PSEXP, SEXP distsSEXP, SEXP methodSEXP, SEXP pSEXP, SEXP testNASEXP, SEXP unitSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_one_many(P, dists, method, p, testNA, unit, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// dist_many_many
Rcpp::NumericMatrix dist_many_many(Rcpp::NumericMatrix dists1, Rcpp::NumericMatrix dists2, Rcpp::String method, double p, bool testNA, Rcpp::String unit, double epsilon);
RcppExport SEXP _philentropy_dist_many_many(SEXP dists1SEXP, SEXP dists2SEXP, SEXP methodSEXP, SEXP pSEXP, SEXP testNASEXP, SEXP unitSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dists1(dists1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dists2(dists2SEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_many_many(dists1, dists2, method, p, testNA, unit, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// custom_log2
double custom_log2(const double& x);
RcppExport SEXP _philentropy_custom_log2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(custom_log2(x));
    return rcpp_result_gen;
END_RCPP
}
// custom_log10
double custom_log10(const double& x);
RcppExport SEXP _philentropy_custom_log10(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(custom_log10(x));
    return rcpp_result_gen;
END_RCPP
}
// euclidean
double euclidean(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_euclidean(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(euclidean(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// manhattan
double manhattan(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_manhattan(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(manhattan(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// minkowski
double minkowski(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, double n, bool testNA);
RcppExport SEXP _philentropy_minkowski(SEXP PSEXP, SEXP QSEXP, SEXP nSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(minkowski(P, Q, n, testNA));
    return rcpp_result_gen;
END_RCPP
}
// chebyshev
double chebyshev(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_chebyshev(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(chebyshev(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// sorensen
double sorensen(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_sorensen(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(sorensen(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// gower
double gower(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_gower(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(gower(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// soergel
double soergel(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_soergel(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(soergel(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// kulczynski_d
double kulczynski_d(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA, double epsilon);
RcppExport SEXP _philentropy_kulczynski_d(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(kulczynski_d(P, Q, testNA, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// canberra
double canberra(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_canberra(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(canberra(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// lorentzian
double lorentzian(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA, const Rcpp::String unit);
RcppExport SEXP _philentropy_lorentzian(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP, SEXP unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    Rcpp::traits::input_parameter< const Rcpp::String >::type unit(unitSEXP);
    rcpp_result_gen = Rcpp::wrap(lorentzian(P, Q, testNA, unit));
    return rcpp_result_gen;
END_RCPP
}
// intersection_dist
double intersection_dist(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_intersection_dist(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(intersection_dist(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// wave_hedges
double wave_hedges(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_wave_hedges(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(wave_hedges(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// czekanowski
double czekanowski(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_czekanowski(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(czekanowski(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// motyka
double motyka(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_motyka(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(motyka(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// tanimoto
double tanimoto(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_tanimoto(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(tanimoto(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// ruzicka
double ruzicka(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_ruzicka(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(ruzicka(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// inner_product
double inner_product(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_inner_product(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(inner_product(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// harmonic_mean_dist
double harmonic_mean_dist(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_harmonic_mean_dist(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(harmonic_mean_dist(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// cosine_dist
double cosine_dist(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_cosine_dist(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(cosine_dist(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// kumar_hassebrook
double kumar_hassebrook(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_kumar_hassebrook(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(kumar_hassebrook(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// jaccard
double jaccard(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_jaccard(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(jaccard(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// dice_dist
double dice_dist(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_dice_dist(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(dice_dist(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// fidelity
double fidelity(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_fidelity(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(fidelity(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// bhattacharyya
double bhattacharyya(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA, const Rcpp::String unit, double epsilon);
RcppExport SEXP _philentropy_bhattacharyya(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP, SEXP unitSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    Rcpp::traits::input_parameter< const Rcpp::String >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(bhattacharyya(P, Q, testNA, unit, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// hellinger
double hellinger(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_hellinger(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(hellinger(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// matusita
double matusita(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_matusita(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(matusita(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// squared_chord
double squared_chord(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_squared_chord(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(squared_chord(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// squared_euclidean
double squared_euclidean(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_squared_euclidean(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(squared_euclidean(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// pearson_chi_sq
double pearson_chi_sq(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA, double epsilon);
RcppExport SEXP _philentropy_pearson_chi_sq(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(pearson_chi_sq(P, Q, testNA, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// neyman_chi_sq
double neyman_chi_sq(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA, double epsilon);
RcppExport SEXP _philentropy_neyman_chi_sq(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(neyman_chi_sq(P, Q, testNA, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// squared_chi_sq
double squared_chi_sq(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_squared_chi_sq(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(squared_chi_sq(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// prob_symm_chi_sq
double prob_symm_chi_sq(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_prob_symm_chi_sq(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(prob_symm_chi_sq(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// divergence_sq
double divergence_sq(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_divergence_sq(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(divergence_sq(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// clark_sq
double clark_sq(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_clark_sq(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(clark_sq(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// additive_symm_chi_sq
double additive_symm_chi_sq(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_additive_symm_chi_sq(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(additive_symm_chi_sq(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// kullback_leibler_distance
double kullback_leibler_distance(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA, const Rcpp::String unit, double epsilon);
RcppExport SEXP _philentropy_kullback_leibler_distance(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP, SEXP unitSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    Rcpp::traits::input_parameter< const Rcpp::String >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(kullback_leibler_distance(P, Q, testNA, unit, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// jeffreys
double jeffreys(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA, const Rcpp::String unit, double epsilon);
RcppExport SEXP _philentropy_jeffreys(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP, SEXP unitSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    Rcpp::traits::input_parameter< const Rcpp::String >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(jeffreys(P, Q, testNA, unit, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// k_divergence
double k_divergence(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA, const Rcpp::String unit);
RcppExport SEXP _philentropy_k_divergence(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP, SEXP unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    Rcpp::traits::input_parameter< const Rcpp::String >::type unit(unitSEXP);
    rcpp_result_gen = Rcpp::wrap(k_divergence(P, Q, testNA, unit));
    return rcpp_result_gen;
END_RCPP
}
// topsoe
double topsoe(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA, const Rcpp::String unit);
RcppExport SEXP _philentropy_topsoe(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP, SEXP unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    Rcpp::traits::input_parameter< const Rcpp::String >::type unit(unitSEXP);
    rcpp_result_gen = Rcpp::wrap(topsoe(P, Q, testNA, unit));
    return rcpp_result_gen;
END_RCPP
}
// jensen_shannon
double jensen_shannon(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA, const Rcpp::String unit);
RcppExport SEXP _philentropy_jensen_shannon(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP, SEXP unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    Rcpp::traits::input_parameter< const Rcpp::String >::type unit(unitSEXP);
    rcpp_result_gen = Rcpp::wrap(jensen_shannon(P, Q, testNA, unit));
    return rcpp_result_gen;
END_RCPP
}
// jensen_difference
double jensen_difference(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA, const Rcpp::String unit);
RcppExport SEXP _philentropy_jensen_difference(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP, SEXP unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    Rcpp::traits::input_parameter< const Rcpp::String >::type unit(unitSEXP);
    rcpp_result_gen = Rcpp::wrap(jensen_difference(P, Q, testNA, unit));
    return rcpp_result_gen;
END_RCPP
}
// taneja
double taneja(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA, const Rcpp::String unit, double epsilon);
RcppExport SEXP _philentropy_taneja(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP, SEXP unitSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    Rcpp::traits::input_parameter< const Rcpp::String >::type unit(unitSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(taneja(P, Q, testNA, unit, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// kumar_johnson
double kumar_johnson(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA, double epsilon);
RcppExport SEXP _philentropy_kumar_johnson(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(kumar_johnson(P, Q, testNA, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// avg
double avg(const Rcpp::NumericVector& P, const Rcpp::NumericVector& Q, bool testNA);
RcppExport SEXP _philentropy_avg(SEXP PSEXP, SEXP QSEXP, SEXP testNASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< bool >::type testNA(testNASEXP);
    rcpp_result_gen = Rcpp::wrap(avg(P, Q, testNA));
    return rcpp_result_gen;
END_RCPP
}
// as_matrix
Rcpp::NumericMatrix as_matrix(Rcpp::DataFrame x);
static SEXP _philentropy_as_matrix_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(as_matrix(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _philentropy_as_matrix(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_philentropy_as_matrix_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// as_data_frame
Rcpp::DataFrame as_data_frame(Rcpp::NumericMatrix mat);
static SEXP _philentropy_as_data_frame_try(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(as_data_frame(mat));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _philentropy_as_data_frame(SEXP matSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_philentropy_as_data_frame_try(matSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sum_rcpp
SEXP sum_rcpp(SEXP vec);
static SEXP _philentropy_sum_rcpp_try(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_rcpp(vec));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _philentropy_sum_rcpp(SEXP vecSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_philentropy_sum_rcpp_try(vecSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// est_prob_empirical
SEXP est_prob_empirical(SEXP CountVec);
static SEXP _philentropy_est_prob_empirical_try(SEXP CountVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type CountVec(CountVecSEXP);
    rcpp_result_gen = Rcpp::wrap(est_prob_empirical(CountVec));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _philentropy_est_prob_empirical(SEXP CountVecSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_philentropy_est_prob_empirical_try(CountVecSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _philentropy_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("Rcpp::NumericMatrix(*as_matrix)(Rcpp::DataFrame)");
        signatures.insert("Rcpp::DataFrame(*as_data_frame)(Rcpp::NumericMatrix)");
        signatures.insert("SEXP(*sum_rcpp)(SEXP)");
        signatures.insert("SEXP(*est_prob_empirical)(SEXP)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _philentropy_RcppExport_registerCCallable() { 
    R_RegisterCCallable("philentropy", "_philentropy_as_matrix", (DL_FUNC)_philentropy_as_matrix_try);
    R_RegisterCCallable("philentropy", "_philentropy_as_data_frame", (DL_FUNC)_philentropy_as_data_frame_try);
    R_RegisterCCallable("philentropy", "_philentropy_sum_rcpp", (DL_FUNC)_philentropy_sum_rcpp_try);
    R_RegisterCCallable("philentropy", "_philentropy_est_prob_empirical", (DL_FUNC)_philentropy_est_prob_empirical_try);
    R_RegisterCCallable("philentropy", "_philentropy_RcppExport_validate", (DL_FUNC)_philentropy_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_philentropy_Ecpp", (DL_FUNC) &_philentropy_Ecpp, 2},
    {"_philentropy_JEcpp", (DL_FUNC) &_philentropy_JEcpp, 2},
    {"_philentropy_CEcpp", (DL_FUNC) &_philentropy_CEcpp, 3},
    {"_philentropy_MIcpp", (DL_FUNC) &_philentropy_MIcpp, 4},
    {"_philentropy_pearson_corr_centred", (DL_FUNC) &_philentropy_pearson_corr_centred, 3},
    {"_philentropy_pearson_corr_uncentred", (DL_FUNC) &_philentropy_pearson_corr_uncentred, 3},
    {"_philentropy_squared_pearson_corr", (DL_FUNC) &_philentropy_squared_pearson_corr, 3},
    {"_philentropy_DistMatrixWithoutUnitDF", (DL_FUNC) &_philentropy_DistMatrixWithoutUnitDF, 3},
    {"_philentropy_DistMatrixMinkowskiMAT", (DL_FUNC) &_philentropy_DistMatrixMinkowskiMAT, 3},
    {"_philentropy_DistMatrixWithoutUnitMAT", (DL_FUNC) &_philentropy_DistMatrixWithoutUnitMAT, 3},
    {"_philentropy_DistMatrixWithUnitDF", (DL_FUNC) &_philentropy_DistMatrixWithUnitDF, 4},
    {"_philentropy_DistMatrixWithUnitMAT", (DL_FUNC) &_philentropy_DistMatrixWithUnitMAT, 4},
    {"_philentropy_dist_one_one", (DL_FUNC) &_philentropy_dist_one_one, 7},
    {"_philentropy_dist_one_many", (DL_FUNC) &_philentropy_dist_one_many, 7},
    {"_philentropy_dist_many_many", (DL_FUNC) &_philentropy_dist_many_many, 7},
    {"_philentropy_custom_log2", (DL_FUNC) &_philentropy_custom_log2, 1},
    {"_philentropy_custom_log10", (DL_FUNC) &_philentropy_custom_log10, 1},
    {"_philentropy_euclidean", (DL_FUNC) &_philentropy_euclidean, 3},
    {"_philentropy_manhattan", (DL_FUNC) &_philentropy_manhattan, 3},
    {"_philentropy_minkowski", (DL_FUNC) &_philentropy_minkowski, 4},
    {"_philentropy_chebyshev", (DL_FUNC) &_philentropy_chebyshev, 3},
    {"_philentropy_sorensen", (DL_FUNC) &_philentropy_sorensen, 3},
    {"_philentropy_gower", (DL_FUNC) &_philentropy_gower, 3},
    {"_philentropy_soergel", (DL_FUNC) &_philentropy_soergel, 3},
    {"_philentropy_kulczynski_d", (DL_FUNC) &_philentropy_kulczynski_d, 4},
    {"_philentropy_canberra", (DL_FUNC) &_philentropy_canberra, 3},
    {"_philentropy_lorentzian", (DL_FUNC) &_philentropy_lorentzian, 4},
    {"_philentropy_intersection_dist", (DL_FUNC) &_philentropy_intersection_dist, 3},
    {"_philentropy_wave_hedges", (DL_FUNC) &_philentropy_wave_hedges, 3},
    {"_philentropy_czekanowski", (DL_FUNC) &_philentropy_czekanowski, 3},
    {"_philentropy_motyka", (DL_FUNC) &_philentropy_motyka, 3},
    {"_philentropy_tanimoto", (DL_FUNC) &_philentropy_tanimoto, 3},
    {"_philentropy_ruzicka", (DL_FUNC) &_philentropy_ruzicka, 3},
    {"_philentropy_inner_product", (DL_FUNC) &_philentropy_inner_product, 3},
    {"_philentropy_harmonic_mean_dist", (DL_FUNC) &_philentropy_harmonic_mean_dist, 3},
    {"_philentropy_cosine_dist", (DL_FUNC) &_philentropy_cosine_dist, 3},
    {"_philentropy_kumar_hassebrook", (DL_FUNC) &_philentropy_kumar_hassebrook, 3},
    {"_philentropy_jaccard", (DL_FUNC) &_philentropy_jaccard, 3},
    {"_philentropy_dice_dist", (DL_FUNC) &_philentropy_dice_dist, 3},
    {"_philentropy_fidelity", (DL_FUNC) &_philentropy_fidelity, 3},
    {"_philentropy_bhattacharyya", (DL_FUNC) &_philentropy_bhattacharyya, 5},
    {"_philentropy_hellinger", (DL_FUNC) &_philentropy_hellinger, 3},
    {"_philentropy_matusita", (DL_FUNC) &_philentropy_matusita, 3},
    {"_philentropy_squared_chord", (DL_FUNC) &_philentropy_squared_chord, 3},
    {"_philentropy_squared_euclidean", (DL_FUNC) &_philentropy_squared_euclidean, 3},
    {"_philentropy_pearson_chi_sq", (DL_FUNC) &_philentropy_pearson_chi_sq, 4},
    {"_philentropy_neyman_chi_sq", (DL_FUNC) &_philentropy_neyman_chi_sq, 4},
    {"_philentropy_squared_chi_sq", (DL_FUNC) &_philentropy_squared_chi_sq, 3},
    {"_philentropy_prob_symm_chi_sq", (DL_FUNC) &_philentropy_prob_symm_chi_sq, 3},
    {"_philentropy_divergence_sq", (DL_FUNC) &_philentropy_divergence_sq, 3},
    {"_philentropy_clark_sq", (DL_FUNC) &_philentropy_clark_sq, 3},
    {"_philentropy_additive_symm_chi_sq", (DL_FUNC) &_philentropy_additive_symm_chi_sq, 3},
    {"_philentropy_kullback_leibler_distance", (DL_FUNC) &_philentropy_kullback_leibler_distance, 5},
    {"_philentropy_jeffreys", (DL_FUNC) &_philentropy_jeffreys, 5},
    {"_philentropy_k_divergence", (DL_FUNC) &_philentropy_k_divergence, 4},
    {"_philentropy_topsoe", (DL_FUNC) &_philentropy_topsoe, 4},
    {"_philentropy_jensen_shannon", (DL_FUNC) &_philentropy_jensen_shannon, 4},
    {"_philentropy_jensen_difference", (DL_FUNC) &_philentropy_jensen_difference, 4},
    {"_philentropy_taneja", (DL_FUNC) &_philentropy_taneja, 5},
    {"_philentropy_kumar_johnson", (DL_FUNC) &_philentropy_kumar_johnson, 4},
    {"_philentropy_avg", (DL_FUNC) &_philentropy_avg, 3},
    {"_philentropy_as_matrix", (DL_FUNC) &_philentropy_as_matrix, 1},
    {"_philentropy_as_data_frame", (DL_FUNC) &_philentropy_as_data_frame, 1},
    {"_philentropy_sum_rcpp", (DL_FUNC) &_philentropy_sum_rcpp, 1},
    {"_philentropy_est_prob_empirical", (DL_FUNC) &_philentropy_est_prob_empirical, 1},
    {"_philentropy_RcppExport_registerCCallable", (DL_FUNC) &_philentropy_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_philentropy(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
